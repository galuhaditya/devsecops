name: CI/CD DevSecOps

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/notes-app
  IMAGE_SHA: ${{ secrets.DOCKERHUB_USERNAME }}/notes-app:${{ github.sha }}
  IMAGE_LATEST: ${{ secrets.DOCKERHUB_USERNAME }}/notes-app:latest

jobs:
  pytest:
    name: Python Unit Tests (pytest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pytest pytest-cov httpx
      - name: Export PYTHONPATH so tests can import `app`
        run: |
          echo "PYTHONPATH=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
          echo "PYTHONPATH set to: ${GITHUB_WORKSPACE}"
      - name: Run pytest + coverage (xml)
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=app --cov-report=xml:coverage-python.xml
      - name: Upload pytest coverage report
        uses: actions/upload-artifact@v4
        with:
          name: pytest-coverage
          path: coverage-python.xml

  bandit:
    name: SAST — Bandit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install bandit
        run: python -m pip install --upgrade pip && pip install bandit jq
      - name: Run bandit (fail on HIGH)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          # if any HIGH severity, fail
          if jq '.results[] | select(.issue_severity=="HIGH")' bandit-report.json | grep -q '.'; then
            echo "High severity issues found by Bandit." ; cat bandit-report.json ; exit 1
          else
            echo "No HIGH severity issues from Bandit."
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  pip_audit:
    name: SCA — pip-audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python & install pip-audit
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install pip-audit
        run: python -m pip install --upgrade pip && pip install pip-audit
      - name: Run pip-audit (fail on findings)
        run: |
          # prefer scanning requirements if present
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt -f json > pip-audit-report.json || (cat pip-audit-report.json && exit 1)
          else
            pip-audit -f json > pip-audit-report.json || (cat pip-audit-report.json && exit 1)
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit-report.json

  gitleaks:
    name: Secret Scan — Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          report_format: json
          report_path: gitleaks-report.json
      - name: Upload Gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  build_and_push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: [pytest, bandit, pip_audit, gitleaks]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image (latest + sha)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_LATEST }}
            ${{ env.IMAGE_SHA }}

      - name: Output image tags
        run: |
          echo "Pushed: $IMAGE_LATEST"
          echo "Pushed: $IMAGE_SHA"

  trivy_scan:
    name: Trivy image scan
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Run Trivy
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ env.IMAGE_SHA }}
          format: 'json'
          output: 'trivy-report.json'
          exit-code: '1'
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
